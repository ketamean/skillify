CREATE OR REPLACE PROCEDURE __create_tables()
LANGUAGE plpgsql
AS $$
BEGIN
  create table if not exists private.users (
    id uuid not null default gen_random_uuid (),
    confirmation_token text null,
    type public.UserType not null,
    status private.UserAccountStatus not null default 'Unconfirmed'::private."UserAccountStatus",
    constraint users_pkey primary key (id),
    constraint users_confirmation_token_key unique (confirmation_token),
    constraint users_id_fkey foreign KEY (id) references auth.users (id)
  ) TABLESPACE pg_default;

  create table if not exists public.learners (
    created_at timestamp with time zone not null default now(),
    first_name text not null,
    last_name text null,
    avatar_image_link text null,
    email text not null,
    bio text null,
    id uuid not null,
    constraint learners_pkey primary key (id),
    constraint users_email_key unique (email),
    constraint learners_id_fkey1 foreign KEY (id) references private.users (id),
    constraint learners_bio_check check ((length(bio) <= 500))
  ) TABLESPACE pg_default;

  create table if not exists public.instructors (
    created_at timestamp with time zone not null default now(),
    first_name text not null,
    last_name text null,
    avatar_image_link text null,
    email text not null,
    accepted boolean not null default false,
    bio text null,
    id uuid not null,
    constraint instructors_pkey primary key (id),
    constraint instructors_email_key unique (email),
    constraint instructors_id_fkey1 foreign KEY (id) references private.users (id),
    constraint instructors_bio_check check ((length(bio) <= 500))
  ) TABLESPACE pg_default;

  create table if not exists public.coursestatus (
    id smallint generated by default as identity not null,
    name text not null,
    constraint course - status_pkey primary key (id)
  ) TABLESPACE pg_default;

  create table if not exists public.courses (
    id bigint generated by default as identity not null,
    created_at timestamp with time zone not null default now(),
    name text not null,
    image_link text not null default ''::text,
    status smallint not null,
    fee double precision not null default '0'::double precision,
    short_description text not null default ''::text,
    instructor_id uuid not null,
    constraint courses_pkey primary key (id),
    constraint courses_instructor_id_fkey foreign KEY (instructor_id) references instructors (id),
    constraint courses_status_fkey foreign KEY (status) references coursestatus (id),
    constraint courses_fee_check check ((fee >= (0)::double precision)),
    constraint courses_name_check check (
      (
        (length(name) > 0)
        and (length(name) <= 70)
      )
    ),
    constraint courses_short_description_check check ((length(short_description) <= 180))
  ) TABLESPACE pg_default;

  create table if not exists public.coursedescriptions (
    id bigint generated by default as identity not null,
    created_at timestamp with time zone not null default now(),
    course_id bigint not null,
    header text not null,
    content text not null,
    constraint coursedescriptions_pkey primary key (id),
    constraint coursedescriptions_course_id_fkey foreign KEY (course_id) references courses (id),
    constraint coursedescriptions_content_check check (
      (
        (length(content) > 0)
        and (length(content) <= 1000)
      )
    ),
    constraint coursedescriptions_header_check check (
      (
        (length(header) > 0)
        and (length(header) <= 60)
      )
    )
  ) TABLESPACE pg_default;

  create table if not exists public.coursematerials (
    id bigint generated by default as identity not null,
    created_at timestamp with time zone not null default now(),
    type public.MaterialType not null,
    course_id bigint not null,
    title text not null,
    description text not null default ''::text,
    constraint coursematerials_pkey1 primary key (id),
    constraint coursematerials_course_id_fkey foreign KEY (course_id) references courses (id),
    constraint coursematerials_description_check check ((length(description) <= 1000)),
    constraint coursematerials_title_check check (
      (
        (length(title) > 0)
        and (length(title) <= 100)
      )
    )
  ) TABLESPACE pg_default;

  create table if not exists public.coursevideos (
    id bigint generated by default as identity not null,
    created_at timestamp with time zone not null default now(),
    thumbnail_link text not null default ''::text,
    video_link text not null,
    is_public boolean not null default false,
    constraint coursevideos_pkey primary key (id),
    constraint coursevideos_id_fkey foreign KEY (id) references coursematerials (id),
    constraint coursevideos_id_fkey1 foreign KEY (id) references coursematerials (id)
  ) TABLESPACE pg_default;

  create table if not exists private.coursedocuments (
    id bigint generated by default as identity not null,
    created_at timestamp with time zone not null default now(),
    link text not null,
    constraint coursedocuments_pkey primary key (id),
    constraint coursedocuments_id_fkey foreign KEY (id) references coursematerials (id)
  ) TABLESPACE pg_default;

  create table if not exists private.coursequizzes (
    id bigint generated by default as identity not null,
    created_at timestamp with time zone not null default now(),
    duration smallint not null default '10'::smallint,
    constraint coursequizzes_pkey primary key (id),
    constraint coursequizzes_id_fkey foreign KEY (id) references coursematerials (id)
  ) TABLESPACE pg_default;

  create table if not exists private.coursequizdetails (
    id bigint generated by default as identity not null,
    created_at timestamp with time zone not null default now(),
    quiz_id bigint null,
    question text null,
    type private.QuizQuestionType null,
    choices text[] null,
    constraint coursequizdetails_pkey primary key (id),
    constraint coursequizdetails_quiz_id_fkey foreign KEY (quiz_id) references private.coursequizzes (id)
  ) TABLESPACE pg_default;

  create table if not exists private.coursematerialcomments (
    id bigint generated by default as identity not null,
    created_at timestamp with time zone not null default now(),
    course_material_id bigint not null,
    content text not null,
    commenter uuid not null,
    constraint coursematerialcomments_pkey primary key (id),
    constraint coursematerialcomments_commenter_fkey foreign KEY (commenter) references private.users (id),
    constraint coursematerialcomments_course_material_id_fkey foreign KEY (course_material_id) references coursematerials (id),
    constraint coursematerialcomments_content_check check ((length(content) <= 200))
  ) TABLESPACE pg_default;

  create table if not exists public.topics (
    id smallint generated by default as identity not null,
    created_at timestamp with time zone not null default now(),
    name text not null,
    constraint topics_pkey primary key (id),
    constraint topics_name_key unique (name)
  ) TABLESPACE pg_default;

  create table if not exists public.courserelatedtopics (
    id bigint generated by default as identity not null,
    course_id bigint not null,
    topic_id smallint not null,
    constraint course - topics_pkey primary key (id),
    constraint course - topics_course_id_fkey foreign KEY (course_id) references courses (id),
    constraint course - topics_topic_id_fkey foreign KEY (topic_id) references topics (id)
  ) TABLESPACE pg_default;

  create table if not exists public.learnerenrolments (
    id bigint generated by default as identity not null,
    created_at timestamp with time zone not null default now(),
    course_id bigint not null,
    learner_id uuid not null,
    constraint learnerenrolments_pkey primary key (id),
    constraint learnerenrolments_course_id_fkey foreign KEY (course_id) references courses (id),
    constraint learnerenrolments_learner_id_fkey foreign KEY (learner_id) references learners (id)
  ) TABLESPACE pg_default;

  create table if not exists private.coupons (
    id bigint generated by default as identity not null,
    created_at timestamp with time zone not null default now(),
    instructor_id uuid not null,
    type public.CouponDiscountType not null,
    discount_value double precision not null default '0'::double precision,
    expiration_time timestamp with time zone not null default now(),
    max_n_usage smallint not null default '1'::smallint,
    code text not null,
    constraint coupons_pkey primary key (id),
    constraint coupons_code_key unique (code),
    constraint coupons_instructor_id_fkey foreign KEY (instructor_id) references instructors (id),
    constraint coupons_max_n_usage_check check ((max_n_usage > 0)),
    constraint coupons_expiration_time_check check ((expiration_time > now())),
    constraint coupons_discount_value_check check ((discount_value >= (0)::double precision)),
    constraint coupons_code_check check (
      (
        (length(code) > 0)
        and (length(code) <= 20)
      )
    )
  ) TABLESPACE pg_default;
END;
$$;